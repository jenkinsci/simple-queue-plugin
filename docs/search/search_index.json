{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#what-is-simple-queue-plugin","title":"What is Simple Queue Plugin?","text":"<p>Plugin for Jenkins to change a build queue order from UI manually or via CLI.</p>"},{"location":"CLI/","title":"CLI","text":"<p>When hovering over priority arrows, you can see that it executes special url aka:</p> <pre><code>http://jenkins_url/simpleMove/move?moveType=DOWN_FAST&amp;itemId=1074193&amp;viewName=.executors\n</code></pre> <p>for item to bottom, or</p> <pre><code>http://jenkins_url/simpleMove/move?moveType=DOWN&amp;itemId=1074184&amp;viewName=.executors\n</code></pre> <p>for item one step forward, or</p> <pre><code>http://jenkins_url/simpleMove/move?moveType=BOTTOM&amp;itemId=1073889&amp;viewName=.executors\n</code></pre> <p>for move to bottom of view. However, get \"id\" is impossible for human use, so the <code>itemID</code> can accept the job name:</p>"},{"location":"CLI/#cli-human-api","title":"CLI-human api","text":"<ul> <li>overview</li> <li>examples</li> <li>global movement<ul> <li>DOWN/DOWN_FAST</li> <li>UP/UP_FAST</li> </ul> </li> <li>in-view movement<ul> <li>BOTTOM</li> <li>TOP</li> </ul> </li> <li>Legacy api</li> <li>Complex names<ul> <li>escaping</li> <li>full names</li> </ul> </li> <li>HTTP return value</li> </ul>"},{"location":"CLI/#overview","title":"overview","text":"<p>The <code>viewName</code> is optional and is obvious. The <code>moveType</code> too (its full enumeration) .  The <code>itemId</code> is super sure for jenkins to jenkins communication, but useless for human usage. Thus the https://github.com/jenkinsci/simple-queue-plugin/pull/2 added feature to move by name, so <code>itemId</code> can be also job name. If no job is found, the plugin will simply fall throug, so to speed up job my-job-name you end up on:</p>"},{"location":"CLI/#examples","title":"examples","text":""},{"location":"CLI/#global-movement","title":"global movement","text":"<p><code>viewName</code> have no efect, it is only for in-view movement (see later). If you use some special custom default view, you may need to add it. If so, enhance below four DOWN/UP examples by <code>viewName=my_weird_default_view</code>.</p>"},{"location":"CLI/#downdown_fast","title":"DOWN/DOWN_FAST","text":"<pre><code>curl -XPOST --user username:apitoken \"http://jenkins_url/simpleMove/move?moveType=DOWN_FAST&amp;itemId=my-job-name\"\n</code></pre> <p>for item to move to bottom - to run before all others now</p> <pre><code>curl -XPOST --user username:apitoken \"http://jenkins_url/simpleMove/move?moveType=DOWN&amp;itemId=my-job-name\"\n</code></pre> <p>for item one step forward - to run before the job, it was supposed to run before this one originally</p> <p>To slow down job my-job-name (in view my_view) you end up on:</p>"},{"location":"CLI/#upup_fast","title":"UP/UP_FAST","text":"<pre><code>curl -XPOST --user username:apitoken \"http://jenkins_url/simpleMove/move?moveType=UP_FAST&amp;itemId=my-job-name\"\n</code></pre> <p>for item to move to top - to run last of all others now</p> <pre><code>curl -XPOST --user username:apitoken \"http://jenkins_url/simpleMove/move?moveType=UP&amp;itemId=my-job-name\"\n</code></pre> <p>for item one step up - to run later than the job, which was supposed to run right after this one originally</p>"},{"location":"CLI/#in-view-movement","title":"in-view movement","text":"<p>in which <code>viewName=my_view</code> is mandatory right after <code>viewName</code>. the UP/UP_FAST/DOWN/DOWN_FAST still behave in global space, and as expected. To jump to the top/bottom of view, there are two additional commands</p>"},{"location":"CLI/#bottom","title":"BOTTOM","text":"<pre><code>curl -XPOST --user username:apitoken \"http://jenkins_url/simpleMove/move?moveType=BOTTOM&amp;itemId=my-job-name&amp;viewName=my_view\"\n</code></pre> <p>for move to bottom of view - the item run before all others in this view</p>"},{"location":"CLI/#top","title":"TOP","text":"<pre><code>curl -XPOST --user username:apitoken \"http://jenkins_url/simpleMove/move?moveType=TOP&amp;itemId=my-job-name&amp;viewName=my_view\"\n</code></pre> <p>for move to top of view - the item run last of all others in this view</p>"},{"location":"CLI/#legacy-api","title":"Legacy Api","text":"<p>The old, unsecure GET approach can still be used, if enabled in main settings:</p> <pre><code>curl \"http://jenkins_url/simpleMoveUnsafe/move?moveType=DOWN_FAST&amp;itemId=my-job-name&amp;viewName=.executors\"\n</code></pre> <p>for item to bottom, or</p> <pre><code>curl \"http://jenkins_url/simpleMoveUnsafe/move?moveType=DOWN&amp;itemId=my-job-name&amp;viewName=.executors\"\n</code></pre> <p>for item one step forward, or</p> <pre><code>curl \"http://jenkins_url/simpleMoveUnsafe/move?moveType=BOTTOM&amp;itemId=my-job-name&amp;viewName=.executors\"\n</code></pre> <p>for move to bottom of view</p> <p>The <code>viewName</code> is optional and is obvious. The <code>moveType</code> too (its full enumeration is in https://github.com/jenkinsci/simple-queue-plugin/blob/master/src/main/java/cz/mendelu/xotradov/MoveType.java .  The <code>itemId</code> is super sure for jenkins to jenkins communication, but useless for human usage. Thus the https://github.com/jenkinsci/simple-queue-plugin/pull/2 added feature to move by name, so <code>itemId</code> can be also job name. If no job is found, the plugin will simply fall throug, so to speed up job my-job-name (in view my_view) you end up on:</p> <pre><code>curl \"http://jenkins_url/simpleMoveUnsafe/move?moveType=DOWN_FAST&amp;itemId=my-job-name\"\n</code></pre> <p>for item to bottom, or</p> <pre><code>curl \"http://jenkins_url/simpleMoveUnsafe/move?moveType=DOWN&amp;itemId=my-job-name\"\n</code></pre> <p>for item one step forward, or</p> <pre><code>curl \"http://jenkins_url/simpleMoveUnsafe/move?moveType=BOTTOM&amp;itemId=my-job-name&amp;viewName=my_view\"\n</code></pre> <p>for move to bottom of view</p> <p>even the reset</p> <pre><code>http://jenkins_url/simpleQueueResetUnsafe/reset\n</code></pre> <p>have working unsafe variant (if enabled)</p>"},{"location":"CLI/#complex-names","title":"Complex names","text":"<p>As investigated at https://github.com/jenkinsci/simple-queue-plugin/pull/3#discussion_r1306649177 ,  there are two cornercases  * escaping: if your name contains % or / they have to be URL escaped. So / will become %2F and % will become %25    * generally spoken, your full name (see lower) should be fully escaped  * full names: somem plugins - e.g.   Pipeline: Nodes and Processes plugin or git branches plugin  - uses lets say fully qualified names. Such name must contain its full dispaly name. eg    * <code>SAUR/Rex/release%2F1.5</code> must be passed in a display name like    * <code>part of SAUR \u00bb Rex \u00bb release/1.5 #413</code> should pe passed in as    * <code>itemId=part%20of%20SAUR%20%C2%BB%20Rex%20%C2%BB%20release%2F1.5%20%23413</code></p> <p>This is annoying, and PR to improve this is welcomed. However, such cross plugin playing is requiring some class-name/reflection playing.</p>"},{"location":"CLI/#http-return-value","title":"HTTP return value","text":"<p>Unluckily, currently plugin always returns <code>302 Found</code> so you will not know if call succeeded. This may change, but is not planned</p>"},{"location":"pluginDevelopment/","title":"For plugin developers","text":"<p>This section is intended for people who want to further extend this plugin.</p>"},{"location":"pluginDevelopment/#testing-build","title":"Testing build","text":"<p>mvn hpi:run</p>"},{"location":"pluginDevelopment/#performing-release","title":"Performing release","text":"<p>Always test connection before release. Testing connection: ssh -T git@github.com</p> <p>Release: mvn release:prepare release:perform</p>"},{"location":"pluginDevelopment/#documentation","title":"Documentation","text":"<p>The documentation framework used is mkdocs. To see the documentation before publishing use 'pip install mkdocs-material' followed by 'mkdocs serve'</p>"},{"location":"pluginDevelopment/#how-it-works-inside","title":"How it works inside","text":""}]}